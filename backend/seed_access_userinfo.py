# scripts/seed_access_userinfo.py
import argparse
import re
from flask import Flask
from sqlalchemy import text
from app.extensions import db
from app.models.access import AccessUserInfo
from datetime import datetime

# --- paste or load your mapping blob here (the big USERINFO list you gave) ---
MAPPING_BLOB = """
USERINFO
USERID Badgenumber
"""

def parse_blob_to_pairs(blob_text):
    tokens = re.split(r'\s+', blob_text.strip())
    start = 0
    if tokens and tokens[0].upper().startswith("USERINFO"):
        start = min(3, len(tokens))
    pairs = []
    i = start
    while i + 1 < len(tokens):
        uid = tokens[i]
        badge = tokens[i + 1]
        pairs.append((str(uid).strip(), str(badge).strip()))
        i += 2
    return pairs

def seed(sn=None, drop=False, dry_run=True):
    app = Flask(__name__)
    app.config.from_object("app.config.Config")
    with app.app_context():
        db.init_app(app)

        if drop:
            # Use raw connection + FK toggle as in seed_branches.py
            with db.engine.connect() as conn:
                conn.execute(text("SET FOREIGN_KEY_CHECKS = 0;"))
                AccessUserInfo.__table__.drop(bind=conn, checkfirst=True)
                AccessUserInfo.__table__.create(bind=conn)
                conn.execute(text("SET FOREIGN_KEY_CHECKS = 1;"))
            print("Dropped + recreated access_userinfo table.")

        pairs = parse_blob_to_pairs(MAPPING_BLOB)
        print(f"Parsed {len(pairs)} pairs.")

        # filter out blank badge tokens and normalize strings
        pairs = [(u, b) for (u, b) in pairs if b and b.strip() != '']
        if not pairs:
            print("No valid pairs found after filtering.")
            return

        # Build set of existing Badgenumbers (optionally scoped by sn if you want)
        q = db.session.query(AccessUserInfo.Badgenumber)
        if sn:
            q = q.filter(AccessUserInfo.sn == sn)
        existing = {str(r[0]) for r in q.all()}

        to_insert = []
        for uid, badge in pairs:
            badge_s = str(badge).strip()
            if badge_s in existing:
                continue
            rec = {
                "USERID": str(uid).strip(),
                "Badgenumber": badge_s,
                "sn": sn,
                "source": "seed_script",
                "created_at": datetime.utcnow()
            }
            to_insert.append(rec)

        print(f"Existing badges (skipped): {len(existing)}")
        print(f"New rows to insert: {len(to_insert)}")

        if dry_run:
            print("Dry run - not inserting.")
            for r in to_insert[:10]:
                print(r)
            return

        if to_insert:
            try:
                db.session.bulk_insert_mappings(AccessUserInfo, to_insert)
                db.session.commit()
                print(f"Inserted {len(to_insert)} rows.")
            except Exception as e:
                db.session.rollback()
                print("Bulk insert failed:", e)
                # fallback per-row
                inserted = 0
                for r in to_insert:
                    try:
                        obj = AccessUserInfo(**r)
                        db.session.add(obj)
                        db.session.commit()
                        inserted += 1
                    except Exception as e2:
                        db.session.rollback()
                        print("Row insert failed:", r, e2)
                print(f"Inserted {inserted} rows with fallback.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--sn", help="device serial to set on rows", default=None)
    parser.add_argument("--drop", action="store_true", help="drop + create table before inserting")
    parser.add_argument("--dry-run", action="store_true", help="show what would be inserted and exit")
    args = parser.parse_args()
    seed(sn=args.sn, drop=args.drop, dry_run=args.dry_run)
